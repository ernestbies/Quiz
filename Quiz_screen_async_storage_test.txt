import React, {Component} from 'react';
import {View, Text, StyleSheet, TouchableOpacity, AsyncStorage} from 'react-native';
import ProgressBar from '../components/ProgressBar';
import {Navigation} from 'react-native-navigation';
import tasks from '../components/Tasks';

export default class QuizScreen extends Component {
  arr = [];

  constructor(props){
    super(props);
    this.state = {
      index: 0,
      keys: [0, 1, 2, 3],
      tests: null
    }

    this.onPress = this.onPress.bind(this);
  }

  componentDidMount() {
    this.loadData();
  }

  loadData() {
    this.setState({
      tests: tasks.slice(),
    });
  }

  onPress(value) {
    this.setState({
      index: this.state.index + 1
    });
    this.arr.push(value);
  }

  goToScreen = screenName => {
    Navigation.push(this.props.componentId, {
      component: {
        name: screenName,
        options: {
          topBar: {
            title: {
              text: 'Moje wyniki'
            }
          }
        },
        passProps: {
          myAnswers: this.arr
        }
      }
    });
  };

  storeData = async () => {
      try {
        await AsyncStorage.setItem('myAnswers', JSON.stringify(this.arr));
      }catch(error) {
          console.log('Error while saving a data: ', error);
      }
  }

  render() {
    if(this.state.tests === null) {
      return (
          <View style={styles.container}>
            <Text>Retrieving data...</Text>
          </View>
      )
    }

    if((this.state.index < this.state.tests.length)){
      return (
          <View style={styles.container}>
            <View>
              <Text style={styles.questionStyle}>Pytanie {this.state.index+1} z {this.state.tests.length}</Text>
              <ProgressBar></ProgressBar>
            </View>
            <View style={styles.questionContainer}>
              <Text style={styles.questionTitle}>{this.state.tests[this.state.index].question}</Text>
            </View>
            <View style={styles.answersContainer}>
              <TouchableOpacity key={this.state.keys[0]} onPress={() => this.onPress(this.state.keys[0])} style={styles.buttonStyle}><Text>{this.state.tests[this.state.index].answers[0].content}</Text></TouchableOpacity>
              <TouchableOpacity key={this.state.keys[1]} onPress={() => this.onPress(this.state.keys[1])} style={styles.buttonStyle}><Text>{this.state.tests[this.state.index].answers[1].content}</Text></TouchableOpacity>
              <TouchableOpacity key={this.state.keys[2]} onPress={() => this.onPress(this.state.keys[2])} style={styles.buttonStyle}><Text>{this.state.tests[this.state.index].answers[2].content}</Text></TouchableOpacity>
              <TouchableOpacity key={this.state.keys[3]} onPress={() => this.onPress(this.state.keys[3])} style={styles.buttonStyle}><Text>{this.state.tests[this.state.index].answers[3].content}</Text></TouchableOpacity>
            </View>
          </View>
      )
    } else {
      this.goToScreen('MyResultScreen');
      //this.storeData().then(r => console.log('Successfully storing a data', r));
      return (
          <View style={styles.container}>
            <Text>Retrieving data...</Text>
          </View>
      )
    }
  }
}

const styles = StyleSheet.create({
  progressBar: {
    height: 15,
    width: '90%',
    backgroundColor: 'white',
    borderColor: '#000',
    borderWidth: 2,
    borderRadius: 5,
    marginLeft: 10,
  },
  container: {
    flex: 1,
    backgroundColor: '#FFFF99'
  },
  questionContainer: {
    marginLeft: 10,
    marginTop: 10,
    marginRight: 10
  },
  answersContainer: {
    marginLeft: 10,
    marginTop: 10,
    marginRight: 10,
    marginBottom: 10,
    backgroundColor: '#FFFF66',
    borderWidth: 1,
    alignItems: 'center'
  },
  buttonStyle: {
    marginTop: 10,
    marginBottom: 10,
    paddingTop: 15,
    paddingBottom: 15,
    backgroundColor: 'orange',
    borderRadius: 10,
    borderWidth: 2,
    borderColor: 'black',
    alignItems: 'center',
    width: 200,
  },
  titleStyle: {
    fontSize: 25,
    fontWeight: 'bold',
    marginLeft: 10,
    marginTop: 10
  },
  questionStyle: {
    fontWeight: 'bold',
    fontSize: 20,
    marginLeft: 10,
    marginTop: 10,
  },
  questionTitle: {
    fontWeight: 'bold',
    fontSize: 20,
    marginBottom: 10
  },
  questionDesc: {
    fontSize: 15
  }
});
